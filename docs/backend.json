{
  "entities": {
    "FinancialAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinancialAccount",
      "type": "object",
      "description": "Represents a financial account (e.g., checking, savings, credit card).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FinancialAccount entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N FinancialAccount)"
        },
        "accountName": {
          "type": "string",
          "description": "Name of the financial account (e.g., 'Checking Account', 'Visa Credit Card')."
        },
        "accountType": {
          "type": "string",
          "description": "Type of the financial account (e.g., 'checking', 'savings', 'credit_card')."
        },
        "institutionName": {
          "type": "string",
          "description": "Name of the financial institution holding the account (e.g., 'Bank of America', 'Chase')."
        },
        "balance": {
          "type": "number",
          "description": "Current balance of the financial account."
        },
        "currency": {
          "type": "string",
          "description": "Currency of the account balance (e.g., 'USD', 'EUR')."
        }
      },
      "required": [
        "id",
        "userId",
        "accountName",
        "accountType",
        "institutionName",
        "balance",
        "currency"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a single financial transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Transaction entity."
        },
        "accountId": {
          "type": "string",
          "description": "Reference to FinancialAccount. (Relationship: FinancialAccount 1:N Transaction)"
        },
        "transactionDate": {
          "type": "string",
          "description": "Date of the transaction.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the transaction."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction. Positive for credits, negative for debits."
        },
        "category": {
          "type": "string",
          "description": "Category of the transaction (e.g., 'food', 'transportation', 'entertainment')."
        },
        "notes": {
          "type": "string",
          "description": "Optional notes about the transaction."
        }
      },
      "required": [
        "id",
        "accountId",
        "transactionDate",
        "description",
        "amount",
        "category"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the FinTrack Mini application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "Username of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "telegramId": {
          "type": "string",
          "description": "Telegram user ID for bot integration."
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    },
    "GoogleSheet": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GoogleSheet",
      "type": "object",
      "description": "Stores the URL and related information for a Google Sheet used for data import.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the GoogleSheet entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N GoogleSheet)"
        },
        "sheetUrl": {
          "type": "string",
          "description": "URL of the Google Sheet.",
          "format": "uri"
        },
        "lastImportDate": {
          "type": "string",
          "description": "Date and time of the last successful data import from the Google Sheet.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "sheetUrl"
      ]
    },
    "SpendingInsight": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpendingInsight",
      "type": "object",
      "description": "Stores insights generated by the AI tool based on spending habits.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the SpendingInsight entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N SpendingInsight)"
        },
        "insightText": {
          "type": "string",
          "description": "The generated insight text."
        },
        "generatedDate": {
          "type": "string",
          "description": "Date and time when the insight was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "insightText",
        "generatedDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/financialAccounts/{financialAccountId}",
        "definition": {
          "entityName": "FinancialAccount",
          "schema": {
            "$ref": "#/backend/entities/FinancialAccount"
          },
          "description": "Stores financial account information for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "financialAccountId",
              "description": "The unique identifier of the financial account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/financialAccounts/{financialAccountId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction information for a specific financial account of a user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "financialAccountId",
              "description": "The unique identifier of the financial account."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier of the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/googleSheets/{googleSheetId}",
        "definition": {
          "entityName": "GoogleSheet",
          "schema": {
            "$ref": "#/backend/entities/GoogleSheet"
          },
          "description": "Stores Google Sheet URLs and import information for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "googleSheetId",
              "description": "The unique identifier of the Google Sheet."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/spendingInsights/{spendingInsightId}",
        "definition": {
          "entityName": "SpendingInsight",
          "schema": {
            "$ref": "#/backend/entities/SpendingInsight"
          },
          "description": "Stores spending insights generated for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "spendingInsightId",
              "description": "The unique identifier of the spending insight."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. The design leverages denormalization for authorization, structural segregation for homogeneous security postures, and consistent access modeling.\n\n*   **Authorization Independence:** The structure avoids `get()` calls in security rules by denormalizing authorization data. The `FinancialAccount`, `Transaction`, `GoogleSheet`, and `SpendingInsight` collections are all subcollections of `/users/{userId}`, ensuring that access control can be based solely on the user ID present in the path.\n*   **Structural Segregation:** Each collection stores data with the same access requirements, simplifying security rules.\n*   **Access Modeling:**  The structure uses path-based ownership (`/users/{userId}/...`) for private user data. This ensures that only the authenticated user can access their own financial accounts, transactions, Google Sheets, and spending insights.\n*   **QAPs:** Secure list operations are supported via structural segregation and path-based ownership, ensuring rules are not used as filters.\n\nThis design provides a clear and maintainable data structure that facilitates robust and easily debuggable security rules."
  }
}