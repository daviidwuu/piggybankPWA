/**
 * @fileoverview Firestore Security Rules for Piggybank App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * access data associated with their own user ID. All data is nested under
 * `/users/{userId}`.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /users/{userId}/transactions/{transactionId}: Individual transactions.
 * - /users/{userId}/budgets/{budgetId}: Budget configurations.
 * - /users/{userId}/pushSubscriptions/{subscriptionId}: Push notification subscriptions.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete data under their own user ID.
 * - Listing of user documents is disallowed for security.
 * - Data schema is not strictly enforced in this prototyping phase, except for fields
 *   critical for authorization (e.g., userId).
 *
 * Denormalization for Authorization:
 *  - The `userId` field is present in the `/transactions`, `/budgets`, and `/pushSubscriptions`
 *    collections to avoid costly `get()` operations and enforce ownership.
 *
 * Structural Segregation:
 *  - Private user data is stored under the `/users/{userId}` collection, ensuring
 *    it is not mixed with public data, simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Returns true when the value is either an integer or a float.
     */
    function isNumber(value) {
      return value is int || value is float;
    }

    /**
     * @description Returns true when the value is a non-negative number.
     */
    function isNonNegativeNumber(value) {
      return isNumber(value) && value >= 0;
    }

    /**
     * @description Ensures the provided value is a non-empty string.
     */
    function isNonEmptyString(value) {
      return value is string && value.size() > 0;
    }

    /**
     * @description Allows timestamp literals or server timestamp sentinels.
     */
    function isTimestampOrServerTime(value) {
      return value is timestamp || value == request.time;
    }

    /**
     * @description Validates a list that should only contain non-empty strings.
     */
    function isStringList(list) {
      return list is list && list.where(item => item is string && item.size() > 0).size() == list.size();
    }

    /**
     * @description Validates the payload written to a user profile document.
     */
    function isValidUserProfile(data) {
      return data.keys().hasOnly(['name', 'categories', 'income', 'savings', 'id']) &&
             (!('name' in data) || isNonEmptyString(data.name)) &&
             (!('categories' in data) || isStringList(data.categories)) &&
             (!('income' in data) || isNonNegativeNumber(data.income)) &&
             (!('savings' in data) || isNonNegativeNumber(data.savings));
    }

    /**
     * @description Validates the payload written to a transaction document.
     */
    function isValidTransaction(data, userId) {
      return data.keys().hasOnly(['Amount', 'Category', 'Notes', 'Type', 'Date', 'userId']) &&
             isNonNegativeNumber(data.Amount) &&
             isNonEmptyString(data.Category) &&
             isNonEmptyString(data.Notes) &&
             isNonEmptyString(data.Type) &&
             data.userId == userId &&
             isTimestampOrServerTime(data.Date);
    }

    /**
     * @description Validates the payload written to a budget document.
     */
    function isValidBudget(data, budgetId) {
      return data.keys().hasOnly(['Category', 'MonthlyBudget']) &&
             (!('Category' in data) || (isNonEmptyString(data.Category) && data.Category == budgetId)) &&
             (!('MonthlyBudget' in data) || isNonNegativeNumber(data.MonthlyBudget));
    }

    /**
     * @description Validates the payload written to a push subscription document.
     */
    function isValidPushSubscription(data) {
      return data.keys().hasOnly(['endpoint', 'keys', 'createdAt', 'updatedAt']) &&
             isNonEmptyString(data.endpoint) &&
             data.keys is map &&
             data.keys.keys().hasOnly(['auth', 'p256dh']) &&
             isNonEmptyString(data.keys.auth) &&
             isNonEmptyString(data.keys.p256dh) &&
             (!('createdAt' in data) || isTimestampOrServerTime(data.createdAt)) &&
             (!('updatedAt' in data) || isTimestampOrServerTime(data.updatedAt));
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'david' with ID 'david' can create their profile.
     * @deny (create) User 'eve' with ID 'david' cannot create a profile with ID 'david'.
     * @allow (get) User 'david' with ID 'david' can get their profile.
     * @deny (get) User 'eve' with ID 'david' cannot get profile with ID 'david'.
     * @deny (list) No one can list the users collection.
     * @allow (update) User 'david' with ID 'david' can update their profile.
     * @deny (update) User 'eve' with ID 'david' cannot update profile with ID 'david'.
     * @allow (delete) User 'david' with ID 'david' can delete their profile.
     * @deny (delete) User 'eve' with ID 'david' cannot delete profile with ID 'david'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && isValidUserProfile(request.resource.data);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) &&
                       isValidUserProfile(request.resource.data) &&
                       // Ensure the id is not being changed in the update
                       (!('id' in request.resource.data) || request.resource.data.id == resource.data.id);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'david' can create a transaction under their profile.
     * @deny (create) User 'eve' cannot create a transaction under user 'david''s profile.
     * @allow (get) User 'david' can get a transaction under their profile.
     * @deny (get) User 'eve' cannot get a transaction under user 'david''s profile.
     * @allow (list) User 'david' can list transactions under their profile.
     * @deny (list) User 'eve' cannot list transactions under user 'david''s profile.
     * @allow (update) User 'david' can update a transaction under their profile.
     * @deny (update) User 'eve' cannot update a transaction under user 'david''s profile.
     * @allow (delete) User 'david' can delete a transaction under their profile.
     * @deny (delete) User 'eve' cannot delete a transaction under user 'david''s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(userId) && isValidTransaction(request.resource.data, userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) &&
                       isValidTransaction(request.resource.data, userId) &&
                       request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User 'david' can create a budget under their profile.
     * @deny (create) User 'eve' cannot create a budget under user 'david''s profile.
     * @allow (get) User 'david' can get a budget under their profile.
     * @deny (get) User 'eve' cannot get a budget under user 'david''s profile.
     * @allow (list) User 'david' can list budgets under their profile.
     * @deny (list) User 'eve' cannot list budgets under user 'david''s profile.
     * @allow (update) User 'david' can update a budget under their profile.
     * @deny (update) User 'eve' cannot update a budget under user 'david''s profile.
     * @allow (delete) User 'david' can delete a budget under their profile.
     * @deny (delete) User 'eve' cannot delete a budget under user 'david''s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow create: if isSignedIn() && isOwner(userId) && isValidBudget(request.resource.data, budgetId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && isValidBudget(request.resource.data, budgetId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user push subscriptions.
     * @path /users/{userId}/pushSubscriptions/{subscriptionId}
     * @allow (create) User 'david' can create a push subscription under their profile.
     * @deny (create) User 'eve' cannot create a push subscription under user 'david''s profile.
     * @allow (get) User 'david' can get a push subscription under their profile.
     * @deny (get) User 'eve' cannot get a push subscription under user 'david''s profile.
     * @allow (list) User 'david' can list push subscriptions under their profile.
     * @deny (list) User 'eve' cannot list push subscriptions under user 'david''s profile.
     * @allow (update) User 'david' can update a push subscription under their profile.
     * @deny (update) User 'eve' cannot update a push subscription under user 'david''s profile.
     * @allow (delete) User 'david' can delete a push subscription under their profile.
     * @deny (delete) User 'eve' cannot delete a push subscription under user 'david''s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/pushSubscriptions/{subscriptionId} {
      allow create: if isSignedIn() && isOwner(userId) && isValidPushSubscription(request.resource.data);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && isValidPushSubscription(request.resource.data);
      allow delete: if isExistingOwner(userId);
    }
  }
}
