/**
 * @fileOverview Firestore Security Rules for Piggybank App
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model.  Each user can only access their own data,
 *  and no global admin roles are defined.
 *
 * @dataStructure The data is structured hierarchically under `/users/{userId}`.  Each user has a profile document,
 *  a collection of transactions, and a collection of budgets.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - Transactions and budgets are private to each user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isSignedIn helper function to check for authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the isOwner helper function to check if the request is made by the owner.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the isExistingOwner helper function to check if the request is made by the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with id 'test_user' can create their own profile.
     * @deny (create) User 'another_user' cannot create a profile with id 'test_user'.
     * @allow (get) User 'test_user' can read their own profile.
     * @deny (get) User 'another_user' cannot read the profile of 'test_user'.
     * @allow (update) User 'test_user' can update their own profile.
     * @deny (update) User 'another_user' cannot update the profile of 'test_user'.
     * @allow (delete) User 'test_user' can delete their own profile.
     * @deny (delete) User 'another_user' cannot delete the profile of 'test_user'.
     * @principle Enforces document ownership for writes and reads.  Validates userId consistency.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'test_user' can create a transaction in their own collection.
     * @deny (create) User 'another_user' cannot create a transaction in 'test_user's collection.
     * @allow (get) User 'test_user' can read a transaction from their own collection.
     * @deny (get) User 'another_user' cannot read a transaction from 'test_user's collection.
     * @allow (update) User 'test_user' can update a transaction in their own collection.
     * @deny (update) User 'another_user' cannot update a transaction in 'test_user's collection.
     * @allow (delete) User 'test_user' can delete a transaction from their own collection.
     * @deny (delete) User 'another_user' cannot delete a transaction from 'test_user's collection.
     * @principle Enforces document ownership for writes and reads. Validates the userId field on creation.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId} collection.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User 'test_user' can create a budget in their own collection.
     * @deny (create) User 'another_user' cannot create a budget in 'test_user's collection.
     * @allow (get) User 'test_user' can read a budget from their own collection.
     * @deny (get) User 'another_user' cannot read a budget from 'test_user's collection.
     * @allow (update) User 'test_user' can update a budget in their own collection.
     * @deny (update) User 'another_user' cannot update a budget in 'test_user's collection.
     * @allow (delete) User 'test_user' can delete a budget from their own collection.
     * @deny (delete) User 'another_user' cannot delete a budget from 'test_user's collection.
     * @principle Enforces document ownership for writes and reads. Validates the userId field on creation.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}