/**
 * @file Firestore Security Rules for FinTrack Mini
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can
 *                access their own data. All data is nested under the /users/{userId} path.
 * @data_structure Data is organized hierarchically under /users/{userId}, with subcollections for transactions and budgets.
 * @key_security_decisions User listing is disallowed. Write access is strictly controlled by user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the user profile data. Only the authenticated user can access their own document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile.
     *                  request.auth.uid: 'user123', request.resource.data.id: 'user123'
     * @allow (get) - User with UID 'user123' can read their profile.
     *                  request.auth.uid: 'user123'
     * @allow (update) - User with UID 'user123' can update their profile.
     *                  request.auth.uid: 'user123'
     * @allow (delete) - User with UID 'user123' can delete their profile.
     *                  request.auth.uid: 'user123'
     * @deny (create) - User with UID 'user456' tries to create a profile for 'user123'.
     *                  request.auth.uid: 'user456', request.resource.data.id: 'user123'
     * @deny (get) - User with UID 'user456' tries to read profile of 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (update) - User with UID 'user456' tries to update profile of 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (delete) - User with UID 'user456' tries to delete profile of 'user123'.
     *                  request.auth.uid: 'user456'
     * @principle Enforces user-ownership; users can only access their own profile.
     */
    match /users/{userId} {
      //function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects user's transactions. Only the authenticated user can access their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User with UID 'user123' can create a transaction under their profile.
     *                  request.auth.uid: 'user123', request.resource.data.userId: 'user123'
     * @allow (get) - User with UID 'user123' can read a transaction under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (list) - User with UID 'user123' can list transactions under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (update) - User with UID 'user123' can update a transaction under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (delete) - User with UID 'user123' can delete a transaction under their profile.
     *                  request.auth.uid: 'user123'
     * @deny (create) - User with UID 'user456' tries to create a transaction for 'user123'.
     *                  request.auth.uid: 'user456', request.resource.data.userId: 'user123'
     * @deny (get) - User with UID 'user456' tries to read a transaction under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (list) - User with UID 'user456' tries to list transactions under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (update) - User with UID 'user456' tries to update a transaction under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (delete) - User with UID 'user456' tries to delete a transaction under 'user123'.
     *                  request.auth.uid: 'user456'
     * @principle Enforces user-ownership; users can only access their own transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(transactionId, userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/transactions/$(transactionId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(transactionId, userId);
      allow delete: if isExistingOwner(transactionId, userId);
    }

    /**
     * @description Protects user's budgets. Only the authenticated user can access their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with UID 'user123' can create a budget under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (get) - User with UID 'user123' can read a budget under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (list) - User with UID 'user123' can list budgets under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (update) - User with UID 'user123' can update a budget under their profile.
     *                  request.auth.uid: 'user123'
     * @allow (delete) - User with UID 'user123' can delete a budget under their profile.
     *                  request.auth.uid: 'user123'
     * @deny (create) - User with UID 'user456' tries to create a budget for 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (get) - User with UID 'user456' tries to read a budget under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (list) - User with UID 'user456' tries to list budgets under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (update) - User with UID 'user456' tries to update a budget under 'user123'.
     *                  request.auth.uid: 'user456'
     * @deny (delete) - User with UID 'user456' tries to delete a budget under 'user123'.
     *                  request.auth.uid: 'user456'
     * @principle Enforces user-ownership; users can only access their own budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(budgetId, userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/budgets/$(budgetId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(budgetId, userId);
      allow delete: if isExistingOwner(budgetId, userId);
    }
  }
}