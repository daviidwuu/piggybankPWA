/**
 * @file Firestore Security Rules for FinTrack Mini
 * @description This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/transactions/{transactionId}: Stores transactions for a specific user.
 * - /users/{userId}/budgets/{budgetId}: Stores budgets for a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile, transactions, and budgets).
 * - Listing all users is disallowed.
 * - No admin roles are defined.
 *
 * Denormalization for Authorization:
 * - Transactions and Budgets are stored as subcollections under the /users/{userId} document.
 *   This enforces the ownership and allows simple rules based on the path.  Each Transaction entry needs a userId field that matches the parent document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create another user's profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /databases/{database}/documents/users/{userId}/transactions/{transactionId}
     * @allow (get) Authenticated user can read their own transaction.
     * @allow (create) Authenticated user can create a transaction for themselves.
     * @allow (update) Authenticated user can update their own transaction.
     * @allow (delete) Authenticated user can delete their own transaction.
     * @deny (get) Authenticated user cannot read another user's transaction.
     * @deny (create) Authenticated user cannot create a transaction for another user.
     * @deny (update) Authenticated user cannot update another user's transaction.
     * @deny (delete) Authenticated user cannot delete another user's transaction.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents for a specific user.
     * @path /databases/{database}/documents/users/{userId}/budgets/{budgetId}
     * @allow (get) Authenticated user can read their own budget.
     * @allow (create) Authenticated user can create a budget for themselves.
     * @allow (update) Authenticated user can update their own budget.
     * @allow (delete) Authenticated user can delete their own budget.
     * @deny (get) Authenticated user cannot read another user's budget.
     * @deny (create) Authenticated user cannot create a budget for another user.
     * @deny (update) Authenticated user cannot update another user's budget.
     * @deny (delete) Authenticated user cannot delete another user's budget.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}