/**
 * @fileoverview Firestore Security Rules for FinTrack Mini.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own profile data, transactions, and budget configurations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction records for each user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget details for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own data. Listing all users is not permitted.
 * - All write operations are restricted to the authenticated user who owns the specific document.
 * - The rules are designed to be flexible on data shapes during this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 *  - Each transaction and budget document contains the userId, enabling direct validation against `request.auth.uid`.
 *  - The user's ID is part of the `/users/{userId}` path and will be validated against the document's internal ID field.
 *
 * Structural Segregation:
 *  - There is no public data in this application. All data is private and specific to each user, stored under their respective /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can read their own profile data.
     * @allow (create) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can create their own profile data.
     * @allow (update) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can update their own profile data.
     * @allow (delete) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can delete their own profile data.
     * @deny (get) User 'someoneElseId' cannot read user '2Kap5n0vQATgCpobwqYVvhjkJoE3' profile data.
     * @deny (create) User 'someoneElseId' cannot create user '2Kap5n0vQATgCpobwqYVvhjkJoE3' profile data.
     * @deny (update) User 'someoneElseId' cannot update user '2Kap5n0vQATgCpobwqYVvhjkJoE3' profile data.
     * @deny (delete) User 'someoneElseId' cannot delete user '2Kap5n0vQATgCpobwqYVvhjkJoE3' profile data.
     * @principle Enforces user-ownership; only the authenticated user can read/write their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents within a user's profile.
     * @path /databases/{database}/documents/users/{userId}/transactions/{transactionId}
     * @allow (get) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can read their own transaction data.
     * @allow (create) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can create their own transaction data.
     * @allow (update) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can update their own transaction data.
     * @allow (delete) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can delete their own transaction data.
     * @deny (get) User 'someoneElseId' cannot read user '2Kap5n0vQATgCpobwqYVvhjkJoE3' transaction data.
     * @deny (create) User 'someoneElseId' cannot create user '2Kap5n0vQATgCpobwqYVvhjkJoE3' transaction data.
     * @deny (update) User 'someoneElseId' cannot update user '2Kap5n0vQATgCpobwqYVvhjkJoE3' transaction data.
     * @deny (delete) User 'someoneElseId' cannot delete user '2Kap5n0vQATgCpobwqYVvhjkJoE3' transaction data.
     * @principle Enforces user-ownership; only the authenticated user can read/write their own transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents within a user's profile.
     * @path /databases/{database}/documents/users/{userId}/budgets/{budgetId}
     * @allow (get) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can read their own budget data.
     * @allow (create) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can create their own budget data.
     * @allow (update) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can update their own budget data.
     * @allow (delete) User '2Kap5n0vQATgCpobwqYVvhjkJoE3' can delete their own budget data.
     * @deny (get) User 'someoneElseId' cannot read user '2Kap5n0vQATgCpobwqYVvhjkJoE3' budget data.
     * @deny (create) User 'someoneElseId' cannot create user '2Kap5n0vQATgCpobwqYVvhjkJoE3' budget data.
     * @deny (update) User 'someoneElseId' cannot update user '2Kap5n0vQATgCpobwqYVvhjkJoE3' budget data.
     * @deny (delete) User 'someoneElseId' cannot delete user '2Kap5n0vQATgCpobwqYVvhjkJoE3' budget data.
     * @principle Enforces user-ownership; only the authenticated user can read/write their own budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.Category is string;
      allow update: if isExistingOwner(userId) && resource.data.Category is string;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}