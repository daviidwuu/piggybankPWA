/**
 * @fileoverview Firestore Security Rules for the Piggybank app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data stored under their unique user ID. Data validation
 * is relaxed to allow for rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/transactions/{transactionId}: Stores individual transaction records.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for each category.
 * - /users/{userId}/pushSubscriptions/{subscriptionId}: Stores web push subscription details.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of all users is disallowed.
 * - Basic validation is performed to ensure data consistency between paths and document content.
 * - Write operations are restricted to signed-in users with matching user IDs.
 *
 * Denormalization for Authorization:
 *  - The 'userId' field on Transaction documents is used to enforce ownership, avoiding the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - Creating a profile with an ID that doesn't match the authenticated user.
     * @deny (get, update, delete) - Accessing another user's profile.
     * @principle Enforces document ownership based on user ID.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user can create transactions under their ID.
     * @allow (get, list, update, delete) - Authenticated user can access their own transactions.
     * @deny (create) - Creating transactions under someone else's ID.
     * @deny (get, list, update, delete) - Accessing another user's transactions.
     * @principle Enforces document ownership based on user ID in the path.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - Authenticated user can create budgets under their ID.
     * @allow (get, list, update, delete) - Authenticated user can access their own budgets.
     * @deny (create) - Creating budgets under someone else's ID.
     * @deny (get, list, update, delete) - Accessing another user's budgets.
     * @principle Enforces document ownership based on user ID in the path.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to push subscription documents.
     * @path /users/{userId}/pushSubscriptions/{subscriptionId}
     * @allow (create) - Authenticated user can create push subscriptions under their ID.
     * @allow (get, list, update, delete) - Authenticated user can access their own push subscriptions.
     * @deny (create) - Creating push subscriptions under someone else's ID.
     * @deny (get, list, update, delete) - Accessing another user's push subscriptions.
     * @principle Enforces document ownership based on user ID in the path.
     */
    match /users/{userId}/pushSubscriptions/{subscriptionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}