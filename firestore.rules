/**
 * @fileoverview Firestore Security Rules for FinTrack Mini.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, preventing unauthorized access to other users'
 * financial information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data for each user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget data for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own user document and subcollections.
 * - Listing of all users is disallowed to prevent data scraping.
 *
 * Denormalization for Authorization:
 * The `userId` field is present on the Transaction documents to enforce ownership and avoid collection group queries that would require significantly more reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the user id does not match the authenticated user id.
     * @deny (get, update, delete) - If the user id does not match the authenticated user id.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transaction documents within a user's subcollection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user creates a transaction under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own transactions.
     * @deny (create) - If the transaction's userId does not match the authenticated user id.
     * @deny (get, list, update, delete) - If the user id does not match the authenticated user id.
     * @principle Enforces document ownership for transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for budget documents within a user's subcollection.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - Authenticated user creates a budget under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own budgets.
     * @deny (create) - If the user id does not match the authenticated user id.
     * @deny (get, list, update, delete) - If the user id does not match the authenticated user id.
     * @principle Enforces document ownership for budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}