/**
 * @fileoverview Firestore Security Rules for FinTrack Mini.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data (profile, transactions, and budgets).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/transactions/{transactionId}: Stores individual transaction records.
 * - /users/{userId}/budgets/{budgetId}: Stores user-defined budget information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Transaction` entity requires `userId` to be stored within the document
 *   itself to enforce ownership.  This avoids the need for complex queries
 *   to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Authenticated user with matching UID can access/modify their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is disallowed.
     * @principle Enforces document ownership; users can only manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      /**
       * @description Controls access to user transaction documents.
       * @path /databases/{database}/documents/users/{userId}/transactions/{transactionId}
       * @allow (create) User with matching UID can create a transaction.
       * @allow (get, update, delete, list) Authenticated user with matching UID can access/modify their transactions.
       * @deny (create) User cannot create a transaction with a mismatched UID.
       * @principle Enforces document ownership; users can only manage their own transactions.
       */
      match /transactions/{transactionId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
      }

       /**
        * @description Controls access to user budget documents.
        * @path /databases/{database}/documents/users/{userId}/budgets/{budgetId}
        * @allow (create) User with matching UID can create a budget.
        * @allow (get, update, delete, list) Authenticated user with matching UID can access/modify their budgets.
        * @deny (create) User cannot create a budget with a mismatched UID.
        * @principle Enforces document ownership; users can only manage their own budgets.
        */
      match /budgets/{budgetId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
        }
    }
  }
}