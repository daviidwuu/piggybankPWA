/**
 * @fileoverview Firestore Security Rules for FinTrack Mini.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data (profile, transactions, and budgets).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/transactions/{transactionId}: Stores individual transaction records.
 * - /users/{userId}/budgets/{budgetId}: Stores user-defined budget information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Transaction` entity requires `userId` to be included as a property. The `userId` property must match the user ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Creating a profile with a mismatched user ID is not allowed.
     * @principle Enforces user-ownership of profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents within a user's profile.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user can create transactions under their profile.
     * @allow (get) - Authenticated user can read transactions under their profile.
     * @allow (update) - Authenticated user can update transactions under their profile.
     * @allow (delete) - Authenticated user can delete transactions under their profile.
     * @deny (create) - Creating a transaction with a mismatched user ID is not allowed.
     * @principle Enforces user-ownership of transaction data.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents within a user's profile.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - Authenticated user can create budgets under their profile.
     * @allow (get) - Authenticated user can read budgets under their profile.
     * @allow (update) - Authenticated user can update budgets under their profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Creating a profile with a mismatched user ID is not allowed.
     * @principle Enforces user-ownership of budget data.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}